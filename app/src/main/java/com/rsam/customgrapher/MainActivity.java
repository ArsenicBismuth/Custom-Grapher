package com.rsam.customgrapher;

import java.util.Collections;
import java.util.LinkedList;

import android.Manifest;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;
import android.widget.Toast;

import com.rsam.customgrapher.permissions.PermissionsActivity;
import com.rsam.customgrapher.permissions.PermissionsChecker;
import com.rsam.customgrapher.settings.SettingsActivity;

public class MainActivity extends AppCompatActivity /*implements Visualizer.OnDataCaptureListener*/ {

    private static final int REQUEST_CODE = 0;
    static final String[] PERMISSIONS = new String[]{Manifest.permission.RECORD_AUDIO, Manifest.permission.MODIFY_AUDIO_SETTINGS};

    private static final int MAX_AMPLITUDE = 65536;
    SimpleWaveform simpleWaveformA;
    SimpleWaveform simpleWaveformB;

    Paint barPencilFirst = new Paint();
    Paint barPencilSecond = new Paint();
    Paint peakPencilFirst = new Paint();
    Paint peakPencilSecond = new Paint();
    Paint background = new Paint();

    Paint xAxisPencil = new Paint();

    LinkedList<Integer> ampListA = new LinkedList<>();  // Data used by Waveform
    LinkedList<Integer> ampListB = new LinkedList<>();

    private static final int RECORDER_SAMPLERATE = 44100;
    private static final int RECORDER_CHANNELS = AudioFormat.CHANNEL_IN_MONO;
    private static final int RECORDER_AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;
    private AudioRecord recorder = null;
    private Thread recordingThread = null;
    private static final int BufferElements2Rec = 1024; // want to play 2048 (2K) since 2 bytes we use only 1024
    private static final int BytesPerElement = 2;       // 2 bytes in 16bit format
    private static int downSample = 1;                  // Get every x-th sample, also a [settings]

    private static long dataNum = 0;                    // Keep the data count, beware it'll overflow so use the difference if necessary

    // This is the specs from the Arduino side. Remember that sample rate here is way higher, thus way higher cutoff too.
//    private double[] b = {0.00475620121821099,0.00531602775009807,0.00697257638013029,0.00965803223475034,0.0132624559586349,0.0176382846165920,
//                            0.0226063729569297,0.0279633277030225,0.0334898346007305,0.0389596373037971,0.0441488004914758,0.0488448779751206,
//                            0.0528556104397779,0.0560167967237531,0.0581990163752782,0.0593129282554953,0.0593129282554953,0.0581990163752782,
//                            0.0560167967237531,0.0528556104397779,0.0488448779751206,0.0441488004914758,0.0389596373037971,0.0334898346007305,
//                            0.0279633277030225,0.0226063729569297,0.0176382846165920,0.0132624559586349,0.00965803223475034,0.00697257638013029,
//                            0.00531602775009807,0.00475620121821099};
//    private double[] b = {0.00475596040228839, 0.00531580606055677, 0.00697234372259142, 0.00965778471653281,
//                            0.0132622108121943, 0.0176380740935920, 0.0226062377206804, 0.0279633102486832,
//                            0.0334899731990188, 0.0389599608983802, 0.0441493248880521, 0.0488456035482273,
//                            0.0528565214595004, 0.0560178622772283, 0.0582001927357403, 0.0593141624426844,
//                            0.0593141624426844, 0.0582001927357403, 0.0560178622772283, 0.0528565214595004,
//                            0.0488456035482273, 0.0441493248880521, 0.0389599608983802, 0.0334899731990188,
//                            0.0279633102486832, 0.0226062377206804, 0.0176380740935920, 0.0132622108121943,
//                            0.00965778471653281, 0.00697234372259142, 0.00531580606055677, 0.00475596040228839};
//    private double[] b = {0.000134205954984061, 0.000134268655038977, 0.000134360412043330, 0.000134481255478402, 0.000134631213613984, 0.000134810313506415, 0.000135018580996665, 0.000135256040708473, 0.000135522716046538, 0.000135818629194766, 0.000136143801114561, 0.000136498251543179, 0.000136881998992131, 0.000137295060745634, 0.000137737452859124, 0.000138209190157819, 0.000138710286235330, 0.000139240753452336, 0.000139800602935304, 0.000140389844575266, 0.000141008487026649, 0.000141656537706159, 0.000142334002791721, 0.000143040887221470, 0.000143777194692797, 0.000144542927661450, 0.000145338087340687, 0.000146162673700488, 0.000147016685466815, 0.000147900120120933, 0.000148812973898779, 0.000149755241790389, 0.000150726917539381, 0.000151727993642491, 0.000152758461349159, 0.000153818310661181, 0.000154907530332402, 0.000156026107868477, 0.000157174029526674, 0.000158351280315745, 0.000159557843995840, 0.000160793703078483, 0.000162058838826604, 0.000163353231254617, 0.000164676859128564, 0.000166029699966307, 0.000167411730037778, 0.000168822924365283, 0.000170263256723860, 0.000171732699641695, 0.000173231224400590, 0.000174758801036488, 0.000176315398340052, 0.000177900983857302, 0.000179515523890299, 0.000181158983497895, 0.000182831326496533, 0.000184532515461097, 0.000186262511725826, 0.000188021275385275, 0.000189808765295341, 0.000191624939074333, 0.000193469753104100, 0.000195343162531221, 0.000197245121268243, 0.000199175581994971, 0.000201134496159826, 0.000203121813981239, 0.000205137484449117, 0.000207181455326354, 0.000209253673150399, 0.000211354083234881, 0.000213482629671283, 0.000215639255330677, 0.000217823901865507, 0.000220036509711435, 0.000222277018089231, 0.000224545365006724, 0.000226841487260810, 0.000229165320439501, 0.000231516798924047, 0.000233895855891094, 0.000236302423314907, 0.000238736431969647, 0.000241197811431691, 0.000243686490082022, 0.000246202395108655, 0.000248745452509135, 0.000251315587093069, 0.000253912722484731, 0.000256536781125703, 0.000259187684277578, 0.000261865352024720, 0.000264569703277065, 0.000267300655772986, 0.000270058126082203, 0.000272842029608752, 0.000275652280594002, 0.000278488792119726, 0.000281351476111225, 0.000284240243340503, 0.000287155003429491, 0.000290095664853335, 0.000293062134943717, 0.000296054319892245, 0.000299072124753886, 0.000302115453450449, 0.000305184208774126, 0.000308278292391077, 0.000311397604845073, 0.000314542045561181, 0.000317711512849510, 0.000320905903909000, 0.000324125114831265, 0.000327369040604481, 0.000330637575117336, 0.000333930611163015, 0.000337248040443244, 0.000340589753572385, 0.000343955640081572, 0.000347345588422905, 0.000350759485973688, 0.000354197219040719, 0.000357658672864622, 0.000361143731624242, 0.000364652278441070, 0.000368184195383732, 0.000371739363472518, 0.000375317662683956, 0.000378918971955446, 0.000382543169189927, 0.000386190131260603, 0.000389859734015706, 0.000393551852283317, 0.000397266359876222, 0.000401003129596824, 0.000404762033242096, 0.000408542941608585, 0.000412345724497451, 0.000416170250719569, 0.000420016388100659, 0.000423884003486475, 0.000427772962748028, 0.000431683130786862, 0.000435614371540372, 0.000439566547987164, 0.000443539522152464, 0.000447533155113564, 0.000451547307005321, 0.000455581837025690, 0.000459636603441307, 0.000463711463593110, 0.000467806273902012, 0.000471920889874600, 0.000476055166108895, 0.000480208956300141, 0.000484382113246641, 0.000488574488855633, 0.000492785934149211, 0.000497016299270280, 0.000501265433488558, 0.000505533185206617, 0.000509819401965963, 0.000514123930453156, 0.000518446616505973, 0.000522787305119606, 0.000527145840452902, 0.000531522065834640, 0.000535915823769852, 0.000540326955946175, 0.000544755303240247, 0.000549200705724134, 0.000553663002671807, 0.000558142032565642, 0.000562637633102968, 0.000567149641202642, 0.000571677893011674, 0.000576222223911874, 0.000580782468526542, 0.000585358460727196, 0.000589950033640329, 0.000594557019654206, 0.000599179250425694, 0.000603816556887124, 0.000608468769253194, 0.000613135717027898, 0.000617817229011496, 0.000622513133307508, 0.000627223257329751, 0.000631947427809404, 0.000636685470802104, 0.000641437211695074, 0.000646202475214289, 0.000650981085431665, 0.000655772865772284, 0.000660577639021650, 0.000665395227332973, 0.000670225452234485, 0.000675068134636784, 0.000679923094840211, 0.000684790152542253, 0.000689669126844978, 0.000694559836262491, 0.000699462098728433, 0.000704375731603489, 0.000709300551682941, 0.000714236375204237, 0.000719183017854591, 0.000724140294778610, 0.000729108020585948, 0.000734086009358979, 0.000739074074660509, 0.000744072029541498, 0.000749079686548821, 0.000754096857733040, 0.000759123354656212, 0.000764158988399716, 0.000769203569572099, 0.000774256908316958, 0.000779318814320827, 0.000784389096821102, 0.000789467564613985, 0.000794554026062440, 0.000799648289104183, 0.000804750161259685, 0.000809859449640203, 0.000814975960955820, 0.000820099501523520, 0.000825229877275268, 0.000830366893766121, 0.000835510356182350, 0.000840660069349588, 0.000845815837740986, 0.000850977465485398, 0.000856144756375578, 0.000861317513876393, 0.000866495541133054, 0.000871678640979369, 0.000876866615946002, 0.000882059268268753, 0.000887256399896860, 0.000892457812501299, 0.000897663307483119, 0.000902872685981775, 0.000908085748883483, 0.000913302296829587, 0.000918522130224938, 0.000923745049246290, 0.000928970853850698, 0.000934199343783943, 0.000939430318588956, 0.000944663577614260, 0.000949898920022420, 0.000955136144798505, 0.000960375050758562, 0.000965615436558091, 0.000970857100700544, 0.000976099841545820, 0.000981343457318776, 0.000986587746117743, 0.000991832505923049, 0.000997077534605556, 0.00100232262993520, 0.00100756758958952, 0.00101281221116224, 0.00101805629217181, 0.00102329963006997, 0.00102854202225033, 0.00103378326605692, 0.00103902315879280, 0.00104426149772863, 0.00104949808011125, 0.00105473270317228, 0.00105996516413671, 0.00106519526023149, 0.00107042278869412, 0.00107564754678130, 0.00108086933177746, 0.00108608794100341, 0.00109130317182491, 0.00109651482166132, 0.00110172268799414, 0.00110692656837568, 0.00111212626043761, 0.00111732156189957, 0.00112251227057779, 0.00112769818439367, 0.00113287910138236, 0.00113805481970140, 0.00114322513763925, 0.00114838985362391, 0.00115354876623148, 0.00115870167419477, 0.00116384837641182, 0.00116898867195451, 0.00117412236007712, 0.00117924924022482, 0.00118436911204233, 0.00118948177538237, 0.00119458703031421, 0.00119968467713224, 0.00120477451636446, 0.00120985634878098, 0.00121492997540254, 0.00121999519750902, 0.00122505181664787, 0.00123009963464265, 0.00123513845360146, 0.00124016807592539, 0.00124518830431697, 0.00125019894178864, 0.00125519979167108, 0.00126019065762173, 0.00126517134363309, 0.00127014165404116, 0.00127510139353380, 0.00128005036715908, 0.00128498838033362, 0.00128991523885092, 0.00129483074888970, 0.00129973471702214, 0.00130462695022223, 0.00130950725587400, 0.00131437544177979, 0.00131923131616846, 0.00132407468770363, 0.00132890536549190, 0.00133372315909096, 0.00133852787851786, 0.00134331933425708, 0.00134809733726866, 0.00135286169899637, 0.00135761223137575, 0.00136234874684218, 0.00136707105833896, 0.00137177897932530, 0.00137647232378438, 0.00138115090623129, 0.00138581454172102, 0.00139046304585640, 0.00139509623479603, 0.00139971392526215, 0.00140431593454856, 0.00140890208052843, 0.00141347218166214, 0.00141802605700513, 0.00142256352621561, 0.00142708440956236, 0.00143158852793243, 0.00143607570283890, 0.00144054575642849, 0.00144499851148926, 0.00144943379145821, 0.00145385142042891, 0.00145825122315903, 0.00146263302507792, 0.00146699665229411, 0.00147134193160280, 0.00147566869049333, 0.00147997675715659, 0.00148426596049245, 0.00148853613011709, 0.00149278709637040, 0.00149701869032323, 0.00150123074378473, 0.00150542308930953, 0.00150959556020504, 0.00151374799053857, 0.00151788021514453, 0.00152199206963151, 0.00152608339038944, 0.00153015401459655, 0.00153420378022648, 0.00153823252605524, 0.00154224009166815, 0.00154622631746680, 0.00155019104467588, 0.00155413411535011, 0.00155805537238101, 0.00156195465950368, 0.00156583182130356, 0.00156968670322317, 0.00157351915156873, 0.00157732901351683, 0.00158111613712104, 0.00158488037131844, 0.00158862156593619, 0.00159233957169799, 0.00159603424023055, 0.00159970542406996, 0.00160335297666813, 0.00160697675239909, 0.00161057660656525, 0.00161415239540373, 0.00161770397609253, 0.00162123120675671, 0.00162473394647453, 0.00162821205528355, 0.00163166539418668, 0.00163509382515819, 0.00163849721114968, 0.00164187541609604, 0.00164522830492128, 0.00164855574354443, 0.00165185759888531, 0.00165513373887030, 0.00165838403243806, 0.00166160834954521, 0.00166480656117192, 0.00166797853932756, 0.00167112415705620, 0.00167424328844210, 0.00167733580861520, 0.00168040159375650, 0.00168344052110342, 0.00168645246895514, 0.00168943731667784, 0.00169239494470998, 0.00169532523456741, 0.00169822806884856, 0.00170110333123950, 0.00170395090651899, 0.00170677068056346, 0.00170956254035198, 0.00171232637397113, 0.00171506207061988, 0.00171776952061437, 0.00172044861539267, 0.00172309924751951, 0.00172572131069090, 0.00172831469973877, 0.00173087931063549, 0.00173341504049845, 0.00173592178759446, 0.00173839945134418, 0.00174084793232650, 0.00174326713228281, 0.00174565695412133, 0.00174801730192125, 0.00175034808093693, 0.00175264919760202, 0.00175492055953349, 0.00175716207553565, 0.00175937365560412, 0.00176155521092971, 0.00176370665390229, 0.00176582789811461, 0.00176791885836601, 0.00176997945066614, 0.00177200959223862, 0.00177400920152461, 0.00177597819818635, 0.00177791650311065, 0.00177982403841235, 0.00178170072743767, 0.00178354649476755, 0.00178536126622091, 0.00178714496885790, 0.00178889753098306, 0.00179061888214840, 0.00179230895315649, 0.00179396767606348, 0.00179559498418200, 0.00179719081208410, 0.00179875509560408, 0.00180028777184127, 0.00180178877916276, 0.00180325805720609, 0.00180469554688187, 0.00180610119037633, 0.00180747493115385, 0.00180881671395940, 0.00181012648482097, 0.00181140419105187, 0.00181264978125306, 0.00181386320531536, 0.00181504441442163, 0.00181619336104891, 0.00181730999897044, 0.00181839428325774, 0.00181944617028247, 0.00182046561771841, 0.00182145258454327, 0.00182240703104043, 0.00182332891880075, 0.00182421821072416, 0.00182507487102131, 0.00182589886521513, 0.00182669016014232, 0.00182744872395478, 0.00182817452612101, 0.00182886753742743, 0.00182952772997964, 0.00183015507720366, 0.00183074955384705, 0.00183131113598006, 0.00183183980099659, 0.00183233552761525, 0.00183279829588024, 0.00183322808716223, 0.00183362488415918, 0.00183398867089707, 0.00183431943273063, 0.00183461715634391, 0.00183488182975095, 0.00183511344229623, 0.00183531198465515, 0.00183547744883445, 0.00183560982817255, 0.00183570911733984, 0.00183577531233891, 0.00183580841050472, 0.00183580841050472, 0.00183577531233891, 0.00183570911733984, 0.00183560982817255, 0.00183547744883445, 0.00183531198465515, 0.00183511344229623, 0.00183488182975095, 0.00183461715634391, 0.00183431943273063, 0.00183398867089707, 0.00183362488415918, 0.00183322808716223, 0.00183279829588024, 0.00183233552761525, 0.00183183980099659, 0.00183131113598006, 0.00183074955384705, 0.00183015507720366, 0.00182952772997964, 0.00182886753742743, 0.00182817452612101, 0.00182744872395478, 0.00182669016014232, 0.00182589886521513, 0.00182507487102131, 0.00182421821072416, 0.00182332891880075, 0.00182240703104043, 0.00182145258454327, 0.00182046561771841, 0.00181944617028247, 0.00181839428325774, 0.00181730999897044, 0.00181619336104891, 0.00181504441442163, 0.00181386320531536, 0.00181264978125306, 0.00181140419105187, 0.00181012648482097, 0.00180881671395940, 0.00180747493115385, 0.00180610119037633, 0.00180469554688187, 0.00180325805720609, 0.00180178877916276, 0.00180028777184127, 0.00179875509560408, 0.00179719081208410, 0.00179559498418200, 0.00179396767606348, 0.00179230895315649, 0.00179061888214840, 0.00178889753098306, 0.00178714496885790, 0.00178536126622091, 0.00178354649476755, 0.00178170072743767, 0.00177982403841235, 0.00177791650311065, 0.00177597819818635, 0.00177400920152461, 0.00177200959223862, 0.00176997945066614, 0.00176791885836601, 0.00176582789811461, 0.00176370665390229, 0.00176155521092971, 0.00175937365560412, 0.00175716207553565, 0.00175492055953349, 0.00175264919760202, 0.00175034808093693, 0.00174801730192125, 0.00174565695412133, 0.00174326713228281, 0.00174084793232650, 0.00173839945134418, 0.00173592178759446, 0.00173341504049845, 0.00173087931063549, 0.00172831469973877, 0.00172572131069090, 0.00172309924751951, 0.00172044861539267, 0.00171776952061437, 0.00171506207061988, 0.00171232637397113, 0.00170956254035198, 0.00170677068056346, 0.00170395090651899, 0.00170110333123950, 0.00169822806884856, 0.00169532523456741, 0.00169239494470998, 0.00168943731667784, 0.00168645246895514, 0.00168344052110342, 0.00168040159375650, 0.00167733580861520, 0.00167424328844210, 0.00167112415705620, 0.00166797853932756, 0.00166480656117192, 0.00166160834954521, 0.00165838403243806, 0.00165513373887030, 0.00165185759888531, 0.00164855574354443, 0.00164522830492128, 0.00164187541609604, 0.00163849721114968, 0.00163509382515819, 0.00163166539418668, 0.00162821205528355, 0.00162473394647453, 0.00162123120675671, 0.00161770397609253, 0.00161415239540373, 0.00161057660656525, 0.00160697675239909, 0.00160335297666813, 0.00159970542406996, 0.00159603424023055, 0.00159233957169799, 0.00158862156593619, 0.00158488037131844, 0.00158111613712104, 0.00157732901351683, 0.00157351915156873, 0.00156968670322317, 0.00156583182130356, 0.00156195465950368, 0.00155805537238101, 0.00155413411535011, 0.00155019104467588, 0.00154622631746680, 0.00154224009166815, 0.00153823252605524, 0.00153420378022648, 0.00153015401459655, 0.00152608339038944, 0.00152199206963151, 0.00151788021514453, 0.00151374799053857, 0.00150959556020504, 0.00150542308930953, 0.00150123074378473, 0.00149701869032323, 0.00149278709637040, 0.00148853613011709, 0.00148426596049245, 0.00147997675715659, 0.00147566869049333, 0.00147134193160280, 0.00146699665229411, 0.00146263302507792, 0.00145825122315903, 0.00145385142042891, 0.00144943379145821, 0.00144499851148926, 0.00144054575642849, 0.00143607570283890, 0.00143158852793243, 0.00142708440956236, 0.00142256352621561, 0.00141802605700513, 0.00141347218166214, 0.00140890208052843, 0.00140431593454856, 0.00139971392526215, 0.00139509623479603, 0.00139046304585640, 0.00138581454172102, 0.00138115090623129, 0.00137647232378438, 0.00137177897932530, 0.00136707105833896, 0.00136234874684218, 0.00135761223137575, 0.00135286169899637, 0.00134809733726866, 0.00134331933425708, 0.00133852787851786, 0.00133372315909096, 0.00132890536549190, 0.00132407468770363, 0.00131923131616846, 0.00131437544177979, 0.00130950725587400, 0.00130462695022223, 0.00129973471702214, 0.00129483074888970, 0.00128991523885092, 0.00128498838033362, 0.00128005036715908, 0.00127510139353380, 0.00127014165404116, 0.00126517134363309, 0.00126019065762173, 0.00125519979167108, 0.00125019894178864, 0.00124518830431697, 0.00124016807592539, 0.00123513845360146, 0.00123009963464265, 0.00122505181664787, 0.00121999519750902, 0.00121492997540254, 0.00120985634878098, 0.00120477451636446, 0.00119968467713224, 0.00119458703031421, 0.00118948177538237, 0.00118436911204233, 0.00117924924022482, 0.00117412236007712, 0.00116898867195451, 0.00116384837641182, 0.00115870167419477, 0.00115354876623148, 0.00114838985362391, 0.00114322513763925, 0.00113805481970140, 0.00113287910138236, 0.00112769818439367, 0.00112251227057779, 0.00111732156189957, 0.00111212626043761, 0.00110692656837568, 0.00110172268799414, 0.00109651482166132, 0.00109130317182491, 0.00108608794100341, 0.00108086933177746, 0.00107564754678130, 0.00107042278869412, 0.00106519526023149, 0.00105996516413671, 0.00105473270317228, 0.00104949808011125, 0.00104426149772863, 0.00103902315879280, 0.00103378326605692, 0.00102854202225033, 0.00102329963006997, 0.00101805629217181, 0.00101281221116224, 0.00100756758958952, 0.00100232262993520, 0.000997077534605556, 0.000991832505923049, 0.000986587746117743, 0.000981343457318776, 0.000976099841545820, 0.000970857100700544, 0.000965615436558091, 0.000960375050758562, 0.000955136144798505, 0.000949898920022420, 0.000944663577614260, 0.000939430318588956, 0.000934199343783943, 0.000928970853850698, 0.000923745049246290, 0.000918522130224938, 0.000913302296829587, 0.000908085748883483, 0.000902872685981775, 0.000897663307483119, 0.000892457812501299, 0.000887256399896860, 0.000882059268268753, 0.000876866615946002, 0.000871678640979369, 0.000866495541133054, 0.000861317513876393, 0.000856144756375578, 0.000850977465485398, 0.000845815837740986, 0.000840660069349588, 0.000835510356182350, 0.000830366893766121, 0.000825229877275268, 0.000820099501523520, 0.000814975960955820, 0.000809859449640203, 0.000804750161259685, 0.000799648289104183, 0.000794554026062440, 0.000789467564613985, 0.000784389096821102, 0.000779318814320827, 0.000774256908316958, 0.000769203569572099, 0.000764158988399716, 0.000759123354656212, 0.000754096857733040, 0.000749079686548821, 0.000744072029541498, 0.000739074074660509, 0.000734086009358979, 0.000729108020585948, 0.000724140294778610, 0.000719183017854591, 0.000714236375204237, 0.000709300551682941, 0.000704375731603489, 0.000699462098728433, 0.000694559836262491, 0.000689669126844978, 0.000684790152542253, 0.000679923094840211, 0.000675068134636784, 0.000670225452234485, 0.000665395227332973, 0.000660577639021650, 0.000655772865772284, 0.000650981085431665, 0.000646202475214289, 0.000641437211695074, 0.000636685470802104, 0.000631947427809404, 0.000627223257329751, 0.000622513133307508, 0.000617817229011496, 0.000613135717027898, 0.000608468769253194, 0.000603816556887124, 0.000599179250425694, 0.000594557019654206, 0.000589950033640329, 0.000585358460727196, 0.000580782468526542, 0.000576222223911874, 0.000571677893011674, 0.000567149641202642, 0.000562637633102968, 0.000558142032565642, 0.000553663002671807, 0.000549200705724134, 0.000544755303240247, 0.000540326955946175, 0.000535915823769852, 0.000531522065834640, 0.000527145840452902, 0.000522787305119606, 0.000518446616505973, 0.000514123930453156, 0.000509819401965963, 0.000505533185206617, 0.000501265433488558, 0.000497016299270280, 0.000492785934149211, 0.000488574488855633, 0.000484382113246641, 0.000480208956300141, 0.000476055166108895, 0.000471920889874600, 0.000467806273902012, 0.000463711463593110, 0.000459636603441307, 0.000455581837025690, 0.000451547307005321, 0.000447533155113564, 0.000443539522152464, 0.000439566547987164, 0.000435614371540372, 0.000431683130786862, 0.000427772962748028, 0.000423884003486475, 0.000420016388100659, 0.000416170250719569, 0.000412345724497451, 0.000408542941608585, 0.000404762033242096, 0.000401003129596824, 0.000397266359876222, 0.000393551852283317, 0.000389859734015706, 0.000386190131260603, 0.000382543169189927, 0.000378918971955446, 0.000375317662683956, 0.000371739363472518, 0.000368184195383732, 0.000364652278441070, 0.000361143731624242, 0.000357658672864622, 0.000354197219040719, 0.000350759485973688, 0.000347345588422905, 0.000343955640081572, 0.000340589753572385, 0.000337248040443244, 0.000333930611163015, 0.000330637575117336, 0.000327369040604481, 0.000324125114831265, 0.000320905903909000, 0.000317711512849510, 0.000314542045561181, 0.000311397604845073, 0.000308278292391077, 0.000305184208774126, 0.000302115453450449, 0.000299072124753886, 0.000296054319892245, 0.000293062134943717, 0.000290095664853335, 0.000287155003429491, 0.000284240243340503, 0.000281351476111225, 0.000278488792119726, 0.000275652280594002, 0.000272842029608752, 0.000270058126082203, 0.000267300655772986, 0.000264569703277065, 0.000261865352024720, 0.000259187684277578, 0.000256536781125703, 0.000253912722484731, 0.000251315587093069, 0.000248745452509135, 0.000246202395108655, 0.000243686490082022, 0.000241197811431691, 0.000238736431969647, 0.000236302423314907, 0.000233895855891094, 0.000231516798924047, 0.000229165320439501, 0.000226841487260810, 0.000224545365006724, 0.000222277018089231, 0.000220036509711435, 0.000217823901865507, 0.000215639255330677, 0.000213482629671283, 0.000211354083234881, 0.000209253673150399, 0.000207181455326354, 0.000205137484449117, 0.000203121813981239, 0.000201134496159826, 0.000199175581994971, 0.000197245121268243, 0.000195343162531221, 0.000193469753104100, 0.000191624939074333, 0.000189808765295341, 0.000188021275385275, 0.000186262511725826, 0.000184532515461097, 0.000182831326496533, 0.000181158983497895, 0.000179515523890299, 0.000177900983857302, 0.000176315398340052, 0.000174758801036488, 0.000173231224400590, 0.000171732699641695, 0.000170263256723860, 0.000168822924365283, 0.000167411730037778, 0.000166029699966307, 0.000164676859128564, 0.000163353231254617, 0.000162058838826604, 0.000160793703078483, 0.000159557843995840, 0.000158351280315745, 0.000157174029526674, 0.000156026107868477, 0.000154907530332402, 0.000153818310661181, 0.000152758461349159, 0.000151727993642491, 0.000150726917539381, 0.000149755241790389, 0.000148812973898779, 0.000147900120120933, 0.000147016685466815, 0.000146162673700488, 0.000145338087340687, 0.000144542927661450, 0.000143777194692797, 0.000143040887221470, 0.000142334002791721, 0.000141656537706159, 0.000141008487026649, 0.000140389844575266, 0.000139800602935304, 0.000139240753452336, 0.000138710286235330, 0.000138209190157819, 0.000137737452859124, 0.000137295060745634, 0.000136881998992131, 0.000136498251543179, 0.000136143801114561, 0.000135818629194766, 0.000135522716046538, 0.000135256040708473, 0.000135018580996665, 0.000134810313506415, 0.000134631213613984, 0.000134481255478402, 0.000134360412043330, 0.000134268655038977, 0.000134205954984061};
//    private double[] b = {0.000577959712366055, 0.000579018348062639, 0.000582094043460733, 0.000587185472073630, 0.000594290074868649, 0.000603404061625786, 0.000614522413051626, 0.000627638883647344, 0.000642746005329164, 0.000659835091799150, 0.000678896243663791, 0.000699918354297335, 0.000722889116446384, 0.000747795029571826, 0.000774621407923687, 0.000803352389344052, 0.000833970944792784, 0.000866458888590253, 0.000900796889370925, 0.000936964481741161, 0.000974940078634179, 0.00101470098435468, 0.00105622340830523, 0.00109948247938602, 0.00114445226105933, 0.00119110576706947, 0.00123941497780859, 0.00128935085731855, 0.00134088337091824, 0.00139398150344590, 0.00144861327810501, 0.00150474577590245, 0.00156234515566705, 0.00162137667463618, 0.00168180470959790, 0.00174359277857574, 0.00180670356304279, 0.00187109893065167, 0.00193673995846618, 0.00200358695668078, 0.00207159949281311, 0.00214073641635482, 0.00221095588386563, 0.00228221538449530, 0.00235447176591774, 0.00242768126066150, 0.00250179951282038, 0.00257678160512796, 0.00265258208637928, 0.00272915499918289, 0.00280645390802639, 0.00288443192763803, 0.00296304175162716, 0.00304223568138583, 0.00312196565523387, 0.00320218327778956, 0.00328283984954782, 0.00336388639664784, 0.00344527370081177, 0.00352695232943619, 0.00360887266581781, 0.00369098493949490, 0.00377323925668575, 0.00385558563080547, 0.00393797401304249, 0.00402035432297580, 0.00410267647921427, 0.00418489043003911, 0.00426694618403074, 0.00434879384066119, 0.00443038362083318, 0.00451166589734728, 0.00459259122527815, 0.00467311037224150, 0.00475317434853289, 0.00483273443712000, 0.00491174222346988, 0.00499014962519282, 0.00506790892148466, 0.00514497278234937, 0.00522129429758398, 0.00529682700550801, 0.00537152492141973, 0.00544534256576174, 0.00551823499197854, 0.00559015781404901, 0.00566106723367674, 0.00573092006712161, 0.00579967377165606, 0.00586728647162971, 0.00593371698412639, 0.00599892484419777, 0.00606287032965799, 0.00612551448542409, 0.00618681914738732, 0.00624674696580048, 0.00630526142816704, 0.00636232688161790, 0.00641790855476198, 0.00647197257899726, 0.00652448600926910, 0.00657541684426310, 0.00662473404602003, 0.00667240755896077, 0.00671840832830957, 0.00676270831790424, 0.00680528052738240, 0.00684609900873307, 0.00688513888220351, 0.00692237635155153, 0.00695778871863377, 0.00699135439732108, 0.00702305292673241, 0.00705286498377897, 0.00708077239501109, 0.00710675814776032, 0.00713080640057010, 0.00715290249290833, 0.00717303295415610, 0.00719118551186692, 0.00720734909929139, 0.00722151386216262, 0.00723367116473837, 0.00724381359509598, 0.00725193496967708, 0.00725803033707900, 0.00726209598109081, 0.00726412942297190, 0.00726412942297190, 0.00726209598109081, 0.00725803033707900, 0.00725193496967708, 0.00724381359509598, 0.00723367116473837, 0.00722151386216262, 0.00720734909929139, 0.00719118551186692, 0.00717303295415610, 0.00715290249290833, 0.00713080640057010, 0.00710675814776032, 0.00708077239501109, 0.00705286498377897, 0.00702305292673241, 0.00699135439732108, 0.00695778871863377, 0.00692237635155153, 0.00688513888220351, 0.00684609900873307, 0.00680528052738240, 0.00676270831790424, 0.00671840832830957, 0.00667240755896077, 0.00662473404602003, 0.00657541684426310, 0.00652448600926910, 0.00647197257899726, 0.00641790855476198, 0.00636232688161790, 0.00630526142816704, 0.00624674696580048, 0.00618681914738732, 0.00612551448542409, 0.00606287032965799, 0.00599892484419777, 0.00593371698412639, 0.00586728647162971, 0.00579967377165606, 0.00573092006712161, 0.00566106723367674, 0.00559015781404901, 0.00551823499197854, 0.00544534256576174, 0.00537152492141973, 0.00529682700550801, 0.00522129429758398, 0.00514497278234937, 0.00506790892148466, 0.00499014962519282, 0.00491174222346988, 0.00483273443712000, 0.00475317434853289, 0.00467311037224150, 0.00459259122527815, 0.00451166589734728, 0.00443038362083318, 0.00434879384066119, 0.00426694618403074, 0.00418489043003911, 0.00410267647921427, 0.00402035432297580, 0.00393797401304249, 0.00385558563080547, 0.00377323925668575, 0.00369098493949490, 0.00360887266581781, 0.00352695232943619, 0.00344527370081177, 0.00336388639664784, 0.00328283984954782, 0.00320218327778956, 0.00312196565523387, 0.00304223568138583, 0.00296304175162716, 0.00288443192763803, 0.00280645390802639, 0.00272915499918289, 0.00265258208637928, 0.00257678160512796, 0.00250179951282038, 0.00242768126066150, 0.00235447176591774, 0.00228221538449530, 0.00221095588386563, 0.00214073641635482, 0.00207159949281311, 0.00200358695668078, 0.00193673995846618, 0.00187109893065167, 0.00180670356304279, 0.00174359277857574, 0.00168180470959790, 0.00162137667463618, 0.00156234515566705, 0.00150474577590245, 0.00144861327810501, 0.00139398150344590, 0.00134088337091824, 0.00128935085731855, 0.00123941497780859, 0.00119110576706947, 0.00114445226105933, 0.00109948247938602, 0.00105622340830523, 0.00101470098435468, 0.000974940078634179, 0.000936964481741161, 0.000900796889370925, 0.000866458888590253, 0.000833970944792784, 0.000803352389344052, 0.000774621407923687, 0.000747795029571826, 0.000722889116446384, 0.000699918354297335, 0.000678896243663791, 0.000659835091799150, 0.000642746005329164, 0.000627638883647344, 0.000614522413051626, 0.000603404061625786, 0.000594290074868649, 0.000587185472073630, 0.000582094043460733, 0.000579018348062639, 0.000577959712366055};
    private double[] b1 = {0.000578129359892039, 0.000579193826460524, 0.000582275959084342, 0.000587374487391014, 0.000594486907082930, 0.000603609481241137, 0.000614737242386116, 0.000627863995294440, 0.000642982320569706, 0.000660083578965669, 0.000679157916459073, 0.000700194270069172, 0.000723180374420490, 0.000748102769044919, 0.000774946806418783, 0.000803696660730039, 0.000834335337370364, 0.000866844683146378, 0.000901205397203865, 0.000937397042658368, 0.000975398058925127, 0.00101518577474087, 0.00105673642186960, 0.00110002514948392, 0.00114502603921339, 0.00119171212085049, 0.00124005538870481, 0.00129002681859542, 0.00134159638547112, 0.00139473308164771, 0.00144940493565129, 0.00150557903165597, 0.00156322152950418, 0.00162229768529728, 0.00168277187254399, 0.00174460760385355, 0.00180776755316048, 0.00187221357846728, 0.00193790674509105, 0.00200480734940004, 0.00207287494302526, 0.00214206835753261, 0.00221234572954024, 0.00228366452626578, 0.00235598157148775, 0.00242925307190531, 0.00250343464388010, 0.00257848134054375, 0.00265434767925448, 0.00273098766938594, 0.00280835484043113, 0.00288640227040429, 0.00296508261452319, 0.00304434813415425, 0.00312415072600275, 0.00320444195153013, 0.00328517306658029, 0.00336629505119682, 0.00344775863961261, 0.00352951435039359, 0.00361151251671804, 0.00369370331677269, 0.00377603680424721, 0.00385846293890798, 0.00394093161723269, 0.00402339270308663, 0.00410579605842198, 0.00418809157398115, 0.00427022919998529, 0.00435215897678901, 0.00443383106548261, 0.00451519577842279, 0.00459620360967322, 0.00467680526533605, 0.00475695169375595, 0.00483659411557770, 0.00491568405363929, 0.00499417336268165, 0.00507201425885711, 0.00514915934901816, 0.00522556165976857, 0.00530117466625902, 0.00537595232070937, 0.00544984908064014, 0.00552281993679570, 0.00559482044074206, 0.00566580673212220, 0.00573573556555211, 0.00580456433714110, 0.00587225111061988, 0.00593875464306043, 0.00600403441017171, 0.00606805063115578, 0.00613076429310875, 0.00619213717495184, 0.00625213187087749, 0.00631071181329633, 0.00636784129527069, 0.00642348549242086, 0.00647761048429071, 0.00653018327515927, 0.00658117181428574, 0.00663054501557511, 0.00667827277665260, 0.00672432599733485, 0.00676867659748678, 0.00681129753425282, 0.00685216281865208, 0.00689124753152715, 0.00692852783883672, 0.00696398100628258, 0.00699758541326194, 0.00702932056613660, 0.00705916711081058, 0.00708710684460864, 0.00711312272744830, 0.00713719889229843, 0.00715932065491797, 0.00717947452286889, 0.00719764820379762, 0.00721383061298006, 0.00722801188012537, 0.00724018335543441, 0.00725033761490904, 0.00725846846490909, 0.00726457094595411, 0.00726864133576761, 0.00727067715156185, 0.00727067715156185, 0.00726864133576761, 0.00726457094595411, 0.00725846846490909, 0.00725033761490904, 0.00724018335543441, 0.00722801188012537, 0.00721383061298006, 0.00719764820379762, 0.00717947452286889, 0.00715932065491797, 0.00713719889229843, 0.00711312272744830, 0.00708710684460864, 0.00705916711081058, 0.00702932056613660, 0.00699758541326194, 0.00696398100628258, 0.00692852783883672, 0.00689124753152715, 0.00685216281865208, 0.00681129753425282, 0.00676867659748678, 0.00672432599733485, 0.00667827277665260, 0.00663054501557511, 0.00658117181428574, 0.00653018327515927, 0.00647761048429071, 0.00642348549242086, 0.00636784129527069, 0.00631071181329633, 0.00625213187087749, 0.00619213717495184, 0.00613076429310875, 0.00606805063115578, 0.00600403441017171, 0.00593875464306043, 0.00587225111061988, 0.00580456433714110, 0.00573573556555211, 0.00566580673212220, 0.00559482044074206, 0.00552281993679570, 0.00544984908064014, 0.00537595232070937, 0.00530117466625902, 0.00522556165976857, 0.00514915934901816, 0.00507201425885711, 0.00499417336268165, 0.00491568405363929, 0.00483659411557770, 0.00475695169375595, 0.00467680526533605, 0.00459620360967322, 0.00451519577842279, 0.00443383106548261, 0.00435215897678901, 0.00427022919998529, 0.00418809157398115, 0.00410579605842198, 0.00402339270308663, 0.00394093161723269, 0.00385846293890798, 0.00377603680424721, 0.00369370331677269, 0.00361151251671804, 0.00352951435039359, 0.00344775863961261, 0.00336629505119682, 0.00328517306658029, 0.00320444195153013, 0.00312415072600275, 0.00304434813415425, 0.00296508261452319, 0.00288640227040429, 0.00280835484043113, 0.00273098766938594, 0.00265434767925448, 0.00257848134054375, 0.00250343464388010, 0.00242925307190531, 0.00235598157148775, 0.00228366452626578, 0.00221234572954024, 0.00214206835753261, 0.00207287494302526, 0.00200480734940004, 0.00193790674509105, 0.00187221357846728, 0.00180776755316048, 0.00174460760385355, 0.00168277187254399, 0.00162229768529728, 0.00156322152950418, 0.00150557903165597, 0.00144940493565129, 0.00139473308164771, 0.00134159638547112, 0.00129002681859542, 0.00124005538870481, 0.00119171212085049, 0.00114502603921339, 0.00110002514948392, 0.00105673642186960, 0.00101518577474087, 0.000975398058925127, 0.000937397042658368, 0.000901205397203865, 0.000866844683146378, 0.000834335337370364, 0.000803696660730039, 0.000774946806418783, 0.000748102769044919, 0.000723180374420490, 0.000700194270069172, 0.000679157916459073, 0.000660083578965669, 0.000642982320569706, 0.000627863995294440, 0.000614737242386116, 0.000603609481241137, 0.000594486907082930, 0.000587374487391014, 0.000582275959084342, 0.000579193826460524, 0.000578129359892039};
//    private double[] b2 = {-0.000194789706989870, -0.000197342795301708, -0.000200599257165085, -0.000204581340298793, -0.000209310708773041, -0.000214808411676430, -0.000221094852325073, -0.000228189758054555, -0.000236112150633816, -0.000244880317340354, -0.000254511782734391, -0.000265023281170300, -0.000276430730081346, -0.000288749204074186, -0.000301992909867924, -0.000316175162112156, -0.000331308360116744, -0.000347403965526183, -0.000364472480969086, -0.000382523429713327, -0.000401565336355305, -0.000421605708571820, -0.000442651019960161, -0.000464706693992618, -0.000487777089108913, -0.000511865484969464, -0.000536974069890697, -0.000563103929482912, -0.000590255036508484, -0.000618426241978324, -0.000647615267501854, -0.000677818698905169, -0.000709031981129270, -0.000741249414420835, -0.000774464151824017, -0.000808668197982225, -0.000843852409255613, -0.000880006495160615, -0.000917119021133020, -0.000955177412618175, -0.000994167960487122, -0.00103407582777863, -0.00107488505776196, -0.00111657858331853, -0.00115913823763356, -0.00120254476619149, -0.00124677784006504, -0.00129181607048743, -0.00133763702469370, -0.00138421724301912, -0.00143153225723682, -0.00147955661011895, -0.00152826387620100, -0.00157762668373101, -0.00162761673777930, -0.00167820484448818, -0.00172936093643435, -0.00178105409908044, -0.00183325259828583, -0.00188592390885006, -0.00193903474405701, -0.00199255108618973, -0.00204643821798241, -0.00210066075497675, -0.00215518267874589, -0.00220996737095246, -0.00226497764820074, -0.00232017579764736, -0.00237552361332855, -0.00243098243316740, -0.00248651317661568, -0.00254207638289298, -0.00259763224977612, -0.00265314067289953, -0.00270856128551878, -0.00276385349869562, -0.00281897654185668, -0.00287388950368185, -0.00292855137327472, -0.00298292108156981, -0.00303695754292683, -0.00309061969686825, -0.00314386654990881, -0.00319665721743222, -0.00324895096556376, -0.00330070725299535, -0.00335188577270900, -0.00340244649355689, -0.00345234970164430, -0.00350155604147343, -0.00355002655679421, -0.00359772273112159, -0.00364460652786581, -0.00369064043003480, -0.00373578747945804, -0.00378001131548974, -0.00382327621314400, -0.00386554712061949, -0.00390678969616667, -0.00394697034426005, -0.00398605625102651, -0.00402401541889455, -0.00406081670041902, -0.00409642983124528, -0.00413082546217212, -0.00416397519027757, -0.00419585158906755, -0.00422642823761868, -0.00425567974867276, -0.00428358179565748, -0.00431011113859531, -0.00433524564887599, -0.00435896433285830, -0.00438124735427755, -0.00440207605542803, -0.00442143297710096, -0.00443930187724919, -0.00445566774836084, -0.00447051683351672, -0.00448383664111940, -0.00449561595826882, -0.00450584486277542, -0.00451451473379116, -0.00452161826105090, -0.00452714945270821, -0.00453110364176144, -0.00453347749105741, 0.995272044813367, -0.00453347749105741, -0.00453110364176144, -0.00452714945270821, -0.00452161826105090, -0.00451451473379116, -0.00450584486277542, -0.00449561595826882, -0.00448383664111940, -0.00447051683351672, -0.00445566774836084, -0.00443930187724919, -0.00442143297710096, -0.00440207605542803, -0.00438124735427755, -0.00435896433285830, -0.00433524564887599, -0.00431011113859531, -0.00428358179565748, -0.00425567974867276, -0.00422642823761868, -0.00419585158906755, -0.00416397519027757, -0.00413082546217212, -0.00409642983124528, -0.00406081670041902, -0.00402401541889455, -0.00398605625102651, -0.00394697034426005, -0.00390678969616667, -0.00386554712061949, -0.00382327621314400, -0.00378001131548974, -0.00373578747945804, -0.00369064043003480, -0.00364460652786581, -0.00359772273112159, -0.00355002655679421, -0.00350155604147343, -0.00345234970164430, -0.00340244649355689, -0.00335188577270900, -0.00330070725299535, -0.00324895096556376, -0.00319665721743222, -0.00314386654990881, -0.00309061969686825, -0.00303695754292683, -0.00298292108156981, -0.00292855137327472, -0.00287388950368185, -0.00281897654185668, -0.00276385349869562, -0.00270856128551878, -0.00265314067289953, -0.00259763224977612, -0.00254207638289298, -0.00248651317661568, -0.00243098243316740, -0.00237552361332855, -0.00232017579764736, -0.00226497764820074, -0.00220996737095246, -0.00215518267874589, -0.00210066075497675, -0.00204643821798241, -0.00199255108618973, -0.00193903474405701, -0.00188592390885006, -0.00183325259828583, -0.00178105409908044, -0.00172936093643435, -0.00167820484448818, -0.00162761673777930, -0.00157762668373101, -0.00152826387620100, -0.00147955661011895, -0.00143153225723682, -0.00138421724301912, -0.00133763702469370, -0.00129181607048743, -0.00124677784006504, -0.00120254476619149, -0.00115913823763356, -0.00111657858331853, -0.00107488505776196, -0.00103407582777863, -0.000994167960487122, -0.000955177412618175, -0.000917119021133020, -0.000880006495160615, -0.000843852409255613, -0.000808668197982225, -0.000774464151824017, -0.000741249414420835, -0.000709031981129270, -0.000677818698905169, -0.000647615267501854, -0.000618426241978324, -0.000590255036508484, -0.000563103929482912, -0.000536974069890697, -0.000511865484969464, -0.000487777089108913, -0.000464706693992618, -0.000442651019960161, -0.000421605708571820, -0.000401565336355305, -0.000382523429713327, -0.000364472480969086, -0.000347403965526183, -0.000331308360116744, -0.000316175162112156, -0.000301992909867924, -0.000288749204074186, -0.000276430730081346, -0.000265023281170300, -0.000254511782734391, -0.000244880317340354, -0.000236112150633816, -0.000228189758054555, -0.000221094852325073, -0.000214808411676430, -0.000209310708773041, -0.000204581340298793, -0.000200599257165085, -0.000197342795301708, -0.000194789706989870};
    private Filter lpf1 = new Filter(256, b1, BufferElements2Rec, true);
//    private Filter hpf1 = new Filter(255, b2, BufferElements2Rec, true);
//    private Rectifier rect1 = new Rectifier(BufferElements2Rec);

//    private double[] b = {1};
//    private Filter lpf1 = new Filter(1, b);

    // Debugging for LOGCAT
    private static final String TAG = "MainActivity";

    // Variables for settings menu and their initial conditions
    public static boolean setBPM = true;    // Settings for BPM calculation
    public static boolean setSPO2 = true;   // Settings for BPM calculation
    public static int setOrientation = 0;   // Settings for orientation
    public static boolean setDebug = false; // Settings for debug message
    public static boolean setReset = false; // Settings for reset settings
//	public static float zoomHor = 1;		// Settings for waveform horizontal scale
//	public static float zoomVer = 1;		// Settings for waveform vertical scale
    public static boolean doRun = true;     // Run/Pause functionality
    public static boolean fabState = true;  // Preserving floating button state on pause

//    public static TimeDiff timeScreen;

    TextView tBPM;
    TextView tSPO2;

    // Layout editor compatibility with simpleWaveform
        // Or at least change the bg canvas to darker white like the original
    // General filter implementation, still not even filtering, and data is somehow cut to a 1/4
        // Synchronized data, or at least matching pace
    // Independent waveform management
        // Dual waveform
    // Demodulation
    // Performance
        // Demodulation is great, only it requires a very high-ordered LPF.
        // 256th order filter is prefect, while 128th order still too noisy, and 1024th too slow.
    // TODO near-perfect demodulation scheme
        // Basically:
        //  1. LPF/HPF to separate 2 signals (not narrow)
        //  2. Rectify & LPF (not narrow)
        //  3. Downsample a lot to be able to implement very narrow BPF or low-freq HPF
    // TODO BPM calculation
    // TODO SPO2 calculation
    // TODO cleaning up on published version
        // Remove advanced profiler & logging

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Main GUIs initialization
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        tBPM = findViewById(R.id.textBPM);
        tSPO2 = findViewById(R.id.textSPO2);

        setDebugMessages("",0); // Empty values

        final FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (doRun) {
                    doRun = false;
                    fabState = false;
                    stopRecording();
                    Toast.makeText(MainActivity.this, getString(R.string.toast_pause),
                            Toast.LENGTH_SHORT).show();
                    fab.setImageResource(android.R.drawable.ic_media_play);
                } else {
                    doRun = true;
                    fabState = true;
                    startRecording();
                    Toast.makeText(MainActivity.this, getString(R.string.toast_resume),
                            Toast.LENGTH_SHORT).show();
                    fab.setImageResource(android.R.drawable.ic_media_pause);
                }
            }
        });

        // Settings initialization
        // Making sure Shared Pref file initialized with default values.
        // Last parameter specifies to read the data if the method has been called before,
        // but it won't reset; just an efficiency flag.
        PreferenceManager.setDefaultValues(this, R.xml.pref_general, false);
            // Add other headers' pref_ if available/used

        // Waveforms initialization
        simpleWaveformA = findViewById(R.id.simpleWaveformA);
        simpleWaveformA.setVisibility(View.VISIBLE);

        simpleWaveformB = findViewById(R.id.simpleWaveformB);
        simpleWaveformB.setVisibility(View.VISIBLE);

        amplitudeWave(simpleWaveformA, ampListA);
        amplitudeWave(simpleWaveformB, ampListB);

//        // Common problem but pretty difficult to find the example, basically check if a layout has been drawn.
//        // This is done since the layout is drawn way later than onCreate, or even onResume in the initial launch.
//        ViewTreeObserver vto = simpleWaveformB.getViewTreeObserver();
//        vto.addOnGlobalLayoutListener (new ViewTreeObserver.OnGlobalLayoutListener() {
//            @Override
//            public void onGlobalLayout() {
//                simpleWaveformB.getViewTreeObserver().removeOnGlobalLayoutListener(this);
//                int width  = simpleWaveformB.getMeasuredWidth();
//                int height = simpleWaveformB.getMeasuredHeight();
//
//                // Do something with the layout data
//            }
//        });

        int bufferSize = AudioRecord.getMinBufferSize(RECORDER_SAMPLERATE,
                RECORDER_CHANNELS, RECORDER_AUDIO_ENCODING);

//        lpf1.initBuffer(BufferElements2Rec);  // Initialized above
//        rect1.initBuffer(BufferElements2Rec);

        Log.d(TAG, "minBufferSize " + String.valueOf(bufferSize));
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Also part of the method called on launch in the Activity Lifecycle

        PermissionsChecker checker = new PermissionsChecker(this);
        if (checker.lacksPermissions(PERMISSIONS)) {
            startPermissionsActivity();
        } else {
            doRun = fabState;
            if (doRun) startRecording();
        }

        // Apply settings
        applySettings();
    }

    @Override
    protected void onPause() {
        super.onPause();
        doRun = false;
        stopRecording();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        // Action on settings (which basically a list of multiple CheckBoxes)
        if (id == R.id.action_settings) {
            Intent intent = new Intent(this, SettingsActivity.class);
            startActivity(intent);
            return true;
        }

        if (id == R.id.action_about) {
            AlertDialog.Builder dialog = new AlertDialog.Builder(this);
            dialog.setTitle(getString(R.string.action_about))
                    .setMessage(getString(R.string.about_content))
                    .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            // continue with delete
                        }
                    })
                    .show();

            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void applySettings() {
        Log.d("", "applySettings");

        // Get Shared Preferences under the default name "com.example.something_preferences"
        SharedPreferences sharedPref =
                PreferenceManager.getDefaultSharedPreferences(this);

        // Get the values
        // Def value here is the value if no value found for specified key (including xml default val)
        setBPM = sharedPref.getBoolean("switch-bpm", true);
        setSPO2 = sharedPref.getBoolean("switch-spo2", true);
        setOrientation = Integer.parseInt(sharedPref.getString("list-orientation", "0"));
        setDebug = sharedPref.getBoolean("switch-debug", false);
        downSample = Integer.parseInt(sharedPref.getString("value-downsample", "10"));
        setReset = sharedPref.getBoolean("switch-reset", false);

        if (setReset) {
            // Force the settings to revert to xml default values
            Log.d("", "Reset");
//            sharedPref.edit().clear().apply();  // Apply() returns no value, faster because asynchronous
            sharedPref.edit().clear().commit();  // But Apply() might make the settings not fully reset

            PreferenceManager.
                    setDefaultValues(this, R.xml.pref_general, false);    // Reread def values

            setReset = false;   // Force change, despite default value is already false. Prevent human error.
            applySettings();    // Reapply settings
            return;
        }

        // Apply settings variables to layout
        View layout = findViewById(R.id.layoutBPM);
        if (setBPM) {
            layout.setVisibility(View.VISIBLE);
            // Also enable calculation
        } else {
            // Remove as a layout rather than just changing visibility
            layout.setVisibility(View.GONE);
            // Also disable calculation
        }

        layout = findViewById(R.id.layoutSPO2);
        if (setSPO2) {
            layout.setVisibility(View.VISIBLE);
            // Also enable calculation
        } else {
            layout.setVisibility(View.GONE);
            // Also disable calculation
        }

        switch (setOrientation) {
            case 2 :  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); break;
            case 1 :  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); break;
            default : setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
        }

        if (downSample < 1) downSample = 1;

        layout = findViewById(R.id.layoutDebug);
        if (setDebug) {
            layout.setVisibility(View.VISIBLE);
        } else {
            layout.setVisibility(View.INVISIBLE);
        }

//        setPower(valAvg, valPeak); // Refresh the power texts
    }

    private void startPermissionsActivity() {
        PermissionsActivity.startActivityForResult(this, REQUEST_CODE, PERMISSIONS);
    }

//    @Override
//    public void onConfigurationChanged(Configuration newConfig) {
//        super.onConfigurationChanged(newConfig);
//
//        // Checks the orientation of the screen, if landscape make the waveform side-by-side
////        LinearLayout layoutWave = findViewById(R.id.layoutWave);
////        LinearLayout separator = findViewById(R.id.separator);
//        if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) { // Default condition, which is the one currently used on the main layout
////            layoutWave.setOrientation(LinearLayout.VERTICAL);
////            Log.d("", "portrait");
//            // Since the height is based on weight, height must be zero, width MATCH_PARENT
//        } else if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE){
////            layoutWave.setOrientation(LinearLayout.HORIZONTAL);
////            Log.d("", "landscape");
//            // Since the the one based on weight, width must be zero, height MATCH_PARENT
//        }
//    }
//
//    private void resizeView(View view, int newWidth, int newHeight) {
//        try {
//            // If only view width and height needed, use a ViewGroup.LayoutParams, as all the other ones inherit from this one.
//            Constructor<? extends ViewGroup.LayoutParams> ctor = view.getLayoutParams().getClass().getDeclaredConstructor(int.class, int.class);
//            view.setLayoutParams(ctor.newInstance(newWidth, newHeight));
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }

    private void startRecording() {

        final short sData[] = new short[BufferElements2Rec];

        try {
            recorder = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    RECORDER_SAMPLERATE, RECORDER_CHANNELS,
                    RECORDER_AUDIO_ENCODING, BufferElements2Rec * BytesPerElement);

            recorder.startRecording();
            recordingThread = new Thread(new Runnable() {
                @Override
                public void run() {

                    while (doRun) {
                        try {
                            Thread.sleep(1);
                        } catch (Exception e) {
                            // Thread waking up earlier due to an interrupt and able to be relocated
                        }

                        recorder.read(sData, 0, BufferElements2Rec);
//                        Log.d("", "ValA " + sData[0]);
//                        rect1.addArray(sData);   // Add data and calculate, resulting in only 1 output at a time for FIR
//                        lpf1.addArray(rect1.getBuffer());   // Add data and calculate, resulting in only 1 output at a time for FIR
                        lpf1.addArray(sData);
//                        hpf1.addArray(lpf1.getBuffer());

                        // New, separate, UI Thread
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                addWaveArray(sData, simpleWaveformA, downSample);   // Remember addWaveArray will do zeroing
//                                addWaveArray(rect1.getBuffer(), simpleWaveformA, downSample);   // Remember addWaveArray will do zeroing
                                addWaveArray(lpf1.getBuffer(), simpleWaveformB, downSample);
//                                addWaveData((int) lpf1.getVal(), simpleWaveformB);
                                setDebugMessages(String.valueOf(Collections.max(ampListA)), 1);
                                setDebugMessages(String.valueOf(ampListB.peekFirst()), 2);
                                setDebugMessages(String.valueOf(dataNum), 3);
                            }
                        });
                    }
                }
            }, "AudioRecorder Thread");
            recordingThread.start();

        } catch (IllegalStateException e) {
            e.printStackTrace();
        }

    }

    private void stopRecording() {
        // stops the recording activity
        if (null != recorder) {
            recorder.stop();
            recorder.release();
            recorder = null;
            recordingThread = null;
        }
    }

    public void addWaveArray(short[] arr, SimpleWaveform simpleWaveform, int downSample) {
        int arrSize = arr.length;
        Log.d("", "dataLength: " + String.valueOf(arrSize));
        for (int i = 0; i < arrSize; i++) {
            if (i % downSample == 0) addWaveData(arr[i], simpleWaveform);    // Add every x data
//            arr[i] = 0;     // Zeroing, thus destructive. Not really necessary based on previous tests, but create a possible problem
        }
    }

    public void addWaveArray(int[] arr, SimpleWaveform simpleWaveform, int downSample) {
        int arrSize = arr.length;
        Log.d("", "dataLength: " + String.valueOf(arrSize));
        for (int i = 0; i < arrSize; i++) {
            if (i % downSample == 0) addWaveData(arr[i], simpleWaveform); // Add every x data
        }
    }

    public void addWaveArray(double[] arr, SimpleWaveform simpleWaveform, int downSample) {
        int arrSize = arr.length;
        Log.d("", "dataLength: " + String.valueOf(arrSize));
        for (int i = 0; i < arrSize; i++) {
            if (i % downSample == 0) addWaveData((int) arr[i], simpleWaveform); // Add every x data
        }
    }

    public void addWaveData(int value, SimpleWaveform simpleWaveform) {
        // Should be called inside an UI Thread since contains View.invalidate()
        value = value * (simpleWaveform.height - 1) / MAX_AMPLITUDE;
        simpleWaveform.dataList.addFirst(value);
        if (simpleWaveform.dataList.size() > simpleWaveform.width / simpleWaveform.barGap + 2) {
            simpleWaveform.dataList.removeLast();
        }
        dataNum++;  // Increment data count
        simpleWaveform.refresh();
//        simpleWaveform.postInvalidate();  // Allow update view outside an UI Thread
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    private int calculateBPM(int values) {
        return 0;
    }

//    public void setPower(int valAvg, int valPeak) {
//        // Power texts controller
//        TextView text;
//        String empty = "-";
//
//        // Store to local class variable
//        this.valAvg = valAvg;
//        this.valPeak = valPeak; // Unused, removed feature
//
//        // Check if highest value
//        valHigh = (valAvg > valHigh) ? valAvg : valHigh;
//
//        text = findViewById(R.id.textAvg);
//
//        if (valAvg == -1) text.setText(empty);
//        else if (setHp) text.setText(String.format("%.3f", valAvg * 0.00134102));
//        else text.setText(String.valueOf(valAvg));
//
//
//        text = findViewById(R.id.textHigh);
//
//        if (valHigh == -1) text.setText(empty);
//        else if (setHp) text.setText(String.format("%.3f", valHigh * 0.00134102));
//        else text.setText(String.valueOf(valHigh));
//    }

    public void setDebugMessages(String message, int index) {
        TextView text;

        // Setting debug messages
        switch (index) {
            case 0:
                // Clear
                text = findViewById(R.id.textDebug1);
                text.setText(String.format(getString(R.string.debug_content_1),""));
                text = findViewById(R.id.textDebug2);
                text.setText(String.format(getString(R.string.debug_content_2),""));
                text = findViewById(R.id.textDebug3);
                text.setText(String.format(getString(R.string.debug_content_3),""));
                break;
            case 1:
                // Immediately stop if no debugging, better performance
                if (!setDebug) return;
                text = findViewById(R.id.textDebug1);
                text.setText(String.format(getString(R.string.debug_content_1), message));
                break;
            case 2:
                // Immediately stop if no debugging, better performance
                if (!setDebug) return;
                text = findViewById(R.id.textDebug2);
                text.setText(String.format(getString(R.string.debug_content_2), message));
                break;
            case 3:
                text = findViewById(R.id.textDebug3);
                text.setText(String.format(getString(R.string.debug_content_3), message));
                break;
        }
    }

    // Specify the theme of every waveform
    private void amplitudeWave(SimpleWaveform simpleWaveform, LinkedList<Integer> ampList) {
        // Receive which waveform and data list

        simpleWaveform.init();

        simpleWaveform.setDataList(ampList);

        //define background
        background.setColor(Color.LTGRAY);
        simpleWaveform.background = background;

        //define bar gap
        simpleWaveform.barGap = 2;

        //define x-axis direction
        simpleWaveform.modeDirection = SimpleWaveform.MODE_DIRECTION_RIGHT_LEFT;

        //define if draw opposite pole when show bars. Doing so will make negatives as absolutes.
        simpleWaveform.modeAmp = SimpleWaveform.MODE_AMP_ORIGIN;
        //define if the unit is px or percent of the view's height
        simpleWaveform.modeHeight = SimpleWaveform.MODE_HEIGHT_PX;
        //define where is the x-axis in y-axis
        simpleWaveform.modeZero = SimpleWaveform.MODE_ZERO_CENTER;
        //if show bars?
        simpleWaveform.showBar = false;

        //define how to show peaks outline
        simpleWaveform.modePeak = SimpleWaveform.MODE_PEAK_ORIGIN;
        //if show peaks outline?
        simpleWaveform.showPeak = true;

        //show x-axis
        simpleWaveform.showXAxis = true;
        xAxisPencil.setStrokeWidth(1);
//        xAxisPencil.setColor(0x88ffffff);
        xAxisPencil.setColor(getResources().getColor(R.color.divider));
        simpleWaveform.xAxisPencil = xAxisPencil;
        //show x-axis on top of outline or under
        simpleWaveform.modePriority = SimpleWaveform.MODE_AXIS_UNDER_AMP;

        //define pencil to draw bar
        barPencilFirst.setStrokeWidth(1);
        barPencilFirst.setColor(0xff1dcf0f);
        simpleWaveform.barPencilFirst = barPencilFirst;
        barPencilSecond.setStrokeWidth(1);
        barPencilSecond.setColor(0xff1dcfcf);
        simpleWaveform.barPencilSecond = barPencilSecond;

        //define pencil to draw peaks outline
        peakPencilFirst.setStrokeWidth(1);
        peakPencilFirst.setColor(getResources().getColor(R.color.colorPrimary));
        simpleWaveform.peakPencilFirst = peakPencilFirst;
        peakPencilSecond.setStrokeWidth(1);
        peakPencilSecond.setColor(getResources().getColor(R.color.colorPrimary));
        simpleWaveform.peakPencilSecond = peakPencilSecond;

        //the first part will be draw by PencilFirst
        simpleWaveform.firstPartNum = 20;

        //define how to clear screen
        simpleWaveform.clearScreenListener = new SimpleWaveform.ClearScreenListener() {
            @Override
            public void clearScreen(Canvas canvas) {
                canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
            }
        };

    }

}